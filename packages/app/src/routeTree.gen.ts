/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as WelcomeIndexImport } from './routes/welcome/index'
import { Route as IdeIndexImport } from './routes/ide/index'
import { Route as WelcomeNewProjectImport } from './routes/welcome/new-project'

// Create/Update Routes

const WelcomeIndexRoute = WelcomeIndexImport.update({
  id: '/welcome/',
  path: '/welcome/',
  getParentRoute: () => rootRoute,
} as any)

const IdeIndexRoute = IdeIndexImport.update({
  id: '/ide/',
  path: '/ide/',
  getParentRoute: () => rootRoute,
} as any)

const WelcomeNewProjectRoute = WelcomeNewProjectImport.update({
  id: '/welcome/new-project',
  path: '/welcome/new-project',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/welcome/new-project': {
      id: '/welcome/new-project'
      path: '/welcome/new-project'
      fullPath: '/welcome/new-project'
      preLoaderRoute: typeof WelcomeNewProjectImport
      parentRoute: typeof rootRoute
    }
    '/ide/': {
      id: '/ide/'
      path: '/ide'
      fullPath: '/ide'
      preLoaderRoute: typeof IdeIndexImport
      parentRoute: typeof rootRoute
    }
    '/welcome/': {
      id: '/welcome/'
      path: '/welcome'
      fullPath: '/welcome'
      preLoaderRoute: typeof WelcomeIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/welcome/new-project': typeof WelcomeNewProjectRoute
  '/ide': typeof IdeIndexRoute
  '/welcome': typeof WelcomeIndexRoute
}

export interface FileRoutesByTo {
  '/welcome/new-project': typeof WelcomeNewProjectRoute
  '/ide': typeof IdeIndexRoute
  '/welcome': typeof WelcomeIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/welcome/new-project': typeof WelcomeNewProjectRoute
  '/ide/': typeof IdeIndexRoute
  '/welcome/': typeof WelcomeIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/welcome/new-project' | '/ide' | '/welcome'
  fileRoutesByTo: FileRoutesByTo
  to: '/welcome/new-project' | '/ide' | '/welcome'
  id: '__root__' | '/welcome/new-project' | '/ide/' | '/welcome/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  WelcomeNewProjectRoute: typeof WelcomeNewProjectRoute
  IdeIndexRoute: typeof IdeIndexRoute
  WelcomeIndexRoute: typeof WelcomeIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  WelcomeNewProjectRoute: WelcomeNewProjectRoute,
  IdeIndexRoute: IdeIndexRoute,
  WelcomeIndexRoute: WelcomeIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/welcome/new-project",
        "/ide/",
        "/welcome/"
      ]
    },
    "/welcome/new-project": {
      "filePath": "welcome/new-project.tsx"
    },
    "/ide/": {
      "filePath": "ide/index.tsx"
    },
    "/welcome/": {
      "filePath": "welcome/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */

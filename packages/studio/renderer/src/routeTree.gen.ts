/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as WelcomeImport } from './routes/welcome'
import { Route as NewProjectImport } from './routes/new-project'
import { Route as IdeImport } from './routes/ide'

// Create/Update Routes

const WelcomeRoute = WelcomeImport.update({
  id: '/welcome',
  path: '/welcome',
  getParentRoute: () => rootRoute,
} as any)

const NewProjectRoute = NewProjectImport.update({
  id: '/new-project',
  path: '/new-project',
  getParentRoute: () => rootRoute,
} as any)

const IdeRoute = IdeImport.update({
  id: '/ide',
  path: '/ide',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/ide': {
      id: '/ide'
      path: '/ide'
      fullPath: '/ide'
      preLoaderRoute: typeof IdeImport
      parentRoute: typeof rootRoute
    }
    '/new-project': {
      id: '/new-project'
      path: '/new-project'
      fullPath: '/new-project'
      preLoaderRoute: typeof NewProjectImport
      parentRoute: typeof rootRoute
    }
    '/welcome': {
      id: '/welcome'
      path: '/welcome'
      fullPath: '/welcome'
      preLoaderRoute: typeof WelcomeImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/ide': typeof IdeRoute
  '/new-project': typeof NewProjectRoute
  '/welcome': typeof WelcomeRoute
}

export interface FileRoutesByTo {
  '/ide': typeof IdeRoute
  '/new-project': typeof NewProjectRoute
  '/welcome': typeof WelcomeRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/ide': typeof IdeRoute
  '/new-project': typeof NewProjectRoute
  '/welcome': typeof WelcomeRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/ide' | '/new-project' | '/welcome'
  fileRoutesByTo: FileRoutesByTo
  to: '/ide' | '/new-project' | '/welcome'
  id: '__root__' | '/ide' | '/new-project' | '/welcome'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IdeRoute: typeof IdeRoute
  NewProjectRoute: typeof NewProjectRoute
  WelcomeRoute: typeof WelcomeRoute
}

const rootRouteChildren: RootRouteChildren = {
  IdeRoute: IdeRoute,
  NewProjectRoute: NewProjectRoute,
  WelcomeRoute: WelcomeRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/ide",
        "/new-project",
        "/welcome"
      ]
    },
    "/ide": {
      "filePath": "ide.tsx"
    },
    "/new-project": {
      "filePath": "new-project.tsx"
    },
    "/welcome": {
      "filePath": "welcome.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
